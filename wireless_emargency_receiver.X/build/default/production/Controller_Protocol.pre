
# 1 "Controller_Protocol.c"

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\stdbool.h"
typedef unsigned char bool;

# 7 "Controller_Protocol.h"
typedef struct{
int num;
int count;
}Organize_Parameter;

typedef struct{
int Buffer_count;
bool Start_signal_has_come;
bool S_flag;
}Store_Parameter;

typedef struct{
int data_send_count;
int last_signal;
bool byte_data_complete;
}Send_Parameter;

typedef union{
struct{
unsigned lower_data :4;
unsigned upper_data :4;
};
unsigned char all_data;
}Untreated;

typedef union{

struct{
unsigned d0:1;
unsigned d1:1;
unsigned d2:1;
unsigned d3:1;
unsigned d4:1;
unsigned d5:1;
unsigned d6:1;
unsigned d7:1;
};

struct{
unsigned lower_data :4;
unsigned upper_data :4;
unsigned LD_error :1;
unsigned UD_error :1;
};
struct{
unsigned char all_data;
unsigned errors :2;
};
}Processed;

typedef union{

struct{
unsigned d0:1;
unsigned d1:1;
unsigned d2:1;
unsigned d3:1;
unsigned d4:1;
unsigned d5:1;
unsigned d6:1;
unsigned d7:1;
};

unsigned char all_data;
}TxData_divided;

# 92
Untreated Buffer0[1 * 2 + 3];
Processed RxData0[1];

# 105
unsigned char TxData0[1];

# 115
extern void Initialize_Parameters(void);
extern void Organize_Datas(Processed *,Untreated *,int,int);
extern bool Store_Datas(Untreated *,unsigned char,int,int, bool (*)(void));
extern void Send_StartSignal(void (*)(unsigned char),void (*)(bool),bool);
extern bool Send_Till_EndSignal(unsigned char *,void (*)(unsigned char),void (*)(bool),int,int);

# 15 "Controller_Protocol.c"
unsigned char not_of_before_data;
Organize_Parameter OP[3];
Store_Parameter StP[3];
Send_Parameter SeP[3];

void Organize_Datas(Processed *RxData, Untreated *Buffer, int number_of_data, int bus_number) {
OP[bus_number].count = 1;
for (OP[bus_number].num = 0; OP[bus_number].num < number_of_data; OP[bus_number].num++) {
RxData[OP[bus_number].num].upper_data = Buffer[OP[bus_number].count].upper_data;
RxData[OP[bus_number].num].lower_data = Buffer[OP[bus_number].count + 1].upper_data;
if ((Buffer[OP[bus_number].count].upper_data | Buffer[OP[bus_number].count + 1].lower_data) == 15)RxData[OP[bus_number].num].UD_error = 0;
else RxData[OP[bus_number].num].UD_error = 1;
if ((Buffer[OP[bus_number].count + 1].upper_data | Buffer[OP[bus_number].count + 2].lower_data) == 15)RxData[OP[bus_number].num].LD_error = 0;
else RxData[OP[bus_number].num].LD_error = 1;
OP[bus_number].count += 2;
}
}

bool Store_Datas(Untreated *Buffer, unsigned char received_data, int number_of_receive_data, int bus_number, bool(*EUSART_ERROR)(void)) {
if (EUSART_ERROR() == 1) {
StP[bus_number].S_flag = 0;
StP[bus_number].Buffer_count = 0;
StP[bus_number].Start_signal_has_come = 0;
return 1;
} else {

if (StP[bus_number].Start_signal_has_come == 0) {
Buffer[StP[bus_number].S_flag].all_data = received_data;
if (StP[bus_number].S_flag == 1) {
if (Buffer[1].lower_data == 5)StP[bus_number].Start_signal_has_come = 1;
StP[bus_number].S_flag = 0;
}
else if (Buffer[0].all_data == 'S')StP[bus_number].S_flag = 1;
} else {
StP[bus_number].Buffer_count++;
Buffer[StP[bus_number].Buffer_count].all_data = received_data;
if (Buffer[StP[bus_number].Buffer_count].all_data == 'C') {
if (Buffer[StP[bus_number].Buffer_count - 1].upper_data == 3) {
StP[bus_number].Buffer_count = 1;
StP[bus_number].Start_signal_has_come = 0;
}
}
if (StP[bus_number].Buffer_count == number_of_receive_data - 1) {
StP[bus_number].Buffer_count = 1;
StP[bus_number].Start_signal_has_come = 0;
}
}
return 0;
}
}

void Send_StartSignal(void (*transmission)(unsigned char), void (*txinterrupt_control)(bool), bool TXIEbit) {
if (!TXIEbit) {
transmission('S');
txinterrupt_control(1);
not_of_before_data = 0x05;
}
}

bool Send_Till_EndSignal(unsigned char *TxData, void (*transmission)(unsigned char), void (*txinterrupt_control)(bool), int number_of_txdata, int bus_number) {
if (SeP[bus_number].data_send_count != number_of_txdata) {
if(SeP[bus_number].data_send_count == 0)not_of_before_data = 0x05;
if (SeP[bus_number].byte_data_complete == 1) {
transmission((TxData[SeP[bus_number].data_send_count] & 0xf0) | (not_of_before_data & 0x0f));
SeP[bus_number].byte_data_complete = 0;
} else {
not_of_before_data = ~TxData[SeP[bus_number].data_send_count];
transmission((TxData[SeP[bus_number].data_send_count] << 4) | (not_of_before_data >> 4));
SeP[bus_number].byte_data_complete = 1;
SeP[bus_number].data_send_count++;
}
} else {
if (SeP[bus_number].last_signal == 0) {
transmission(0x30 | (not_of_before_data & 0x0f));
SeP[bus_number].last_signal++;
} else if (SeP[bus_number].last_signal == 1) {
transmission('C');
SeP[bus_number].last_signal++;
} else {
SeP[bus_number].last_signal = 0;
SeP[bus_number].data_send_count = 0;
txinterrupt_control(0);
return 1;
}
}
return 0;
}

# 107
extern void Initialize_Parameters(void) {
static int i;

for (i = 0; i < 3; i++)OP[i].count = 1;
for (i = 0; i < 3; i++) {
StP[i].Buffer_count = 1;
SeP[i].byte_data_complete = 1;
}
}

